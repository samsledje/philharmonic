name: CI/CD

on:
  # Run on every push AND on releases
  push:
    branches:
      - main
      - dev
  # release:
  #   types: [published]
    tags:
        - 'v*'  # Trigger on version tags
  release:
    types: [published]

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev

      - name: Get package version
        if: matrix.python-version == '3.11'
        id: version
        run: echo "VERSION=$(poetry version --short)" >> $GITHUB_OUTPUT

      - name: Lint with Ruff
        run: |
          poetry run ruff check .
          poetry run ruff format .

      - name: Run tests with pytest
        # Generate both XML and HTML coverage reports
        run: |
          poetry run pytest --cov=philharmonic --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          # Include branch name and commit SHA in artifact name
          name: coverage-v${{ steps.version.outputs.VERSION }}-py${{ matrix.python-version }}-${{ github.ref_name }}-${{ github.sha }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  publish:
    needs: quality
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for dunamai to work with git history

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish
